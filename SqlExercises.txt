ODEV-1
-- postgresql kurmadım. Sorgular asagida ki gibidir.

-- 1) SELECT title, description FROM film ;
-- 2) SELECT * FROM film WHERE lenght > 60 AND lenght < 75;
-- 3) SELECT * FROM film WHERE rental_rate = 0.99 AND replacement_cost = 12.99 OR replacement_cost = 28.99;
-- 4) SELECT first_name, last_name FROM customer WHERE first_name = "Mary";
-- 5) SELECT * FROM film WHERE NOT(length > 50 AND rental_rate = 2.99 OR rental_rate 4.99);

-- ERDEM BUZLUK...


ODEV-2

-- 1) SELECT * FROM film WHERE replacement cost BETWEEN 12.99 AND 16.98;
-- 2) SELECT first_name, last_name FROM actor WHERE first_name IN('Nick', 'Penelope', 'Ed');
-- 3) SELECT * FROM film WHERE rental_rate IN(0.99, 2.99, 4.99) AND replacement_cost IN(12.99, 15.99, 28.99);

-- ERDEM BUZLUK...

ODEV-3

-- 1) SELECT country FROM country WHERE country LIKE 'A%A';
-- 2) SELECT country FROM country WHERE country LIKE '_____%n';
-- 3) SELECT title FROM film WHERE title ILIKE '%t%t%t%t%';
-- 4) SELECT * FROM film WHERE (title LIKE 'C%') AND (length >90) AND (rental_rate=2.99);

-- ERDEM BUZLUK...


ODEV-4

-- 1) SELECT DISTINCT(replacement_cost) FROM film;
-- 2) SELECT COUNT(DISTINCT(replacement_cost) FROM film;
-- 3) SELECT COUNT(*) FROM film WHERE title LIKE 't%' AND rating = 'G';
-- 4) SELECT COUNT(*) FROM country WHERE country LIKE '_____';
-- 5) SELECT COUNT(*) FROM city WHERE city_name LIKE 'R%' AND city_name LIKE 'r%';

-- ERDEM BUZLUK...





ODEV-5

-- 1) SELECT title FROM film WHERE title LIKE '%n' ORDER BY length desc limit 5;
-- 2) SELECT title FROM film WHERE title LIKE '%n' ORDER BY length asc offset 5 limit 5;
-- 3) SELECT store_id, last_name FROM customer WHERE store_id = 1 ORDER BY last_name limit 4;

ODEV-6

-- 1) SELECT AVG(rental_rate) FROM film
-- 2) SELECT COUNT(title) FROM film WHERE title LIKE 'C%';
-- 3) SELECT MAX(length) FROM film WHERE rental_rate = 0.99; 
-- 4) SELECT COUNT(DISTINCT(replacement_cost)) FROM film WHERE length > 150;

-- ERDEM BUZLUK...


ODEV-7

-- 1) SELECT rating FROM film GROUP BY rating;
-- 2) SELECT replacement_cost, COUNT(*) FROM film GROUP BY replacement_cost HAVING COUNT(*) > 50
-- 3) SELECT store_id, COUNT(*) FROM customer GROUP BY store_id; 
-- 4) SELECT country_id, COUNT(*) FROM city GROUP BY country_id ORDER BY COUNT(*) DESC LIMIT 1;

-- ERDEM BUZLUK...


ODEV-8

-- Tablo Olusturma --

-- 1) CREATE TABLE employee (
--    id serial int primary key,
--    name varchar(50) NOT NULL,
--    birthday date,
--    email varchar(100)
--);

-- 3) UPDATE employee SET name = "erdem", birthday = "1998-05-09", email = "erdem@buzluk.com" WHERE  id = 1;
--    UPDATE employee SET name = "hasan", birthday = "1928-05-19", email = "hasan@can.com" WHERE  name = "hasan";
--    UPDATE employee SET name = "emrah", birthday = "1988-11-23", email = "emrah@dilek.com" WHERE  bithday = "1988-11-23";
--    UPDATE employee SET name = "gamze", birthday = "1992-01-14", email = "gamze@acer.com" WHERE  id = 4;
--    UPDATE employee SET name = "hülya", birthday = "2000-03-01", email = "hülya@tutar.com" WHERE  email = "hülya@tutar.com";

-- 4) DELETE FROM employee WHERE id = 6;
--    DELETE FROM employee WHERE name = "Nancy";
--    DELETE FROM employee WHERE birthday = "2021-12-22";
--    DELETE FROM employee WHERE email = "lbernhard8@yelp.com";
--    DELETE FROM employee WHERE id = 10;

ODEV-9


--1)
SELECT city, country FROM city INNER JOIN country ON city.country_id = country.country_id;

--2)
SELECT payment_id, first_name, last_name FROM payment INNER JOIN customer ON payment.customer_id = customer.customer_id;

--3
SELECT rental_id, first_name , last_name FROM rental INNER JOIN customer ON rental.customer_id = customer.customer_id;

-- ERDEM BUZLUK...


ODEV-10


--1-)
SELECT city, country FROM city LEFT JOIN country ON country.country_id = city.country_id;

--2)
SELECT first_name, last_name FROM customer  RIGHT JOIN payment ON customer.customer_id = payment.customer_id;

--3)
SELECT rental_id,first_name, last_name FROM customer FULL JOIN rental ON customer.customer_id = payment.customer_id;

-- ERDEM BUZLUK...

ODEV-11

1-)
(SELECT first_name FROM actor)
UNION
(SELECT first_name FROM customer);

2-)
(SELECT first_name FROM actor)
INTERSECT
(SELECT first_name FROM customer);

3-)
(SELECT first_name FROM actor)
EXCEPT
(SELECT first_name FROM customer);

4-)
(SELECT first_name FROM actor)
UNION ALL
(SELECT first_name FROM customer);

(SELECT first_name FROM actor)
INTERSECT ALL
(SELECT first_name FROM customer);

(SELECT first_name FROM actor)
EXCEPT ALL
(SELECT first_name FROM customer);


ODEV-12

1-) SELECT COUNT(*) FROM film WHERE length > (SELECT AVG(length) FROM film);
2-) SELECT COUNT(*) FROM film WHERE rental_rate = (SELECT MAX(rental_rate) FROM film);
3-) SELECT title FROM film WHERE rental_rate = (SELECT MIN(rental_rate) FROM film) AND replacement_cost = (SELECT MIN(replacement_cost) FROM film)
4-) SELECT payment.customer_id, COUNT(payment.customer_id) AS payment_count FROM payment INNER JOIN customer ON payment.customer_id = customer.customer_id
   GROUP BY payment.customer_id ORDER BY payment_count DESC;

www.patika.dev
